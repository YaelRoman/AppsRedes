class Tree:
    def __init__(self, value):
        self.value = value
        self.father = None
        self.left = None
        self.right = None
    
    def addChild(self, child):
        ### Child tipo Tree
        if isinstance(child, Tree):
            if child.value < self.value:
                if self.left is None:
                    self.left = child
                    self.left.father = self
                else:
                    self.left.addChild(child)
            else:
                if self.right is None:
                    self.right = child
                    self.right.father = self
                else:
                    self.right.addChild(child)
        ### Child otro tipo (valor)
        else:
            if child < self.value:
                if self.left is None:
                    self.left = Tree(child)
                    self.left.father = self
                else:
                    self.left.addChild(child)
            else:
                if self.right is None:
                    self.right = Tree(child)
                    self.right.father = self
                else:
                    self.right.addChild(child)

    def preOrder(self):
        print(self.value, end=" ")
        if self.left is not None: self.left.preOrder()
        if self.right is not None: self.right.preOrder()

    def inOrder(self):
        if self.left is not None: self.left.inOrder()
        print(self.value, end=" ")
        if self.right is not None: self.right.inOrder()

    def postOrder(self):
        if self.left is not None: self.left.postOrder()
        if self.right is not None: self.right.postOrder()
        print(self.value, end=" ")

    def searchValue(self, value):
        if value == self.value: return self
        else:
            if value < self.value:
                if self.left is None:
                    return None
                return self.left.searchValue(value)
            else:
                if self.right is None:
                    return None
                return self.right.searchValue(value)
            
    def isLeaf(self, value):
        node = self.searchValue(value)
        if node.left is None and node.right is None:
            return True
        return False
    
    def printLeaves(self):
        if self.left is None and self.right is None:
            print(self.value, end=" ")    
        else:
            if self.left is not None:
                self.left.printLeaves()
            if self.right is not None:
                self.right.printLeaves()
            
    def levelValue(self, value, level=1):
        if value == self.value: return level
        else:
            if value < self.value:
                if self.left is None:
                    return None
                return self.left.levelValue(value, level + 1)
            else:
                if self.right is None:
                    return None
                return self.right.levelValue(value, level + 1)
    
    def depth(self):
        if self.left is None:
            leftHeight = 0
        else: leftHeight = self.left.depth()
        if self.right is None:
            rightHeight = 0
        else: rightHeight = self.right.depth()
        return 1 + max(leftHeight, rightHeight)


    def searchMinimum(self):
        if self.left is None:
            return self
        return self.left.searchMinimum()
    
    def searchMax(self):
        if self.right is None:
            return self
        return self.right.searchMax()
    
    def deleteByValue(self, value):
        node2Delete = self.searchValue(value)
        if node2Delete is None: 
            print("There's no node with value", value, "to delete")
        else:
            print("Deleting node with value: ", value)
            theFather = node2Delete.father
            if theFather is None:
                print("Cannot delete root node")
            else:
                # Sin nietos
                if node2Delete.left is None and node2Delete.right is None:
                    if theFather.left == node2Delete:
                        theFather.left = None
                    else:
                        theFather.righ = None
                # Solo nieto consentido
                elif node2Delete.left is not None and node2Delete.right is None:
                    if theFather.left == node2Delete:
                        theFather.left = node2Delete.left
                    else:
                        theFather.right = node2Delete.left
                    node2Delete.left.father = theFather
                # Solo nieto grandote
                elif node2Delete.left is None and node2Delete.right is not None:
                    if theFather.left == node2Delete:
                        theFather.left = node2Delete.right
                    else:
                        theFather.right = node2Delete.right
                    node2Delete.right.father = theFather
                # Dos nietos
                else:
                    minimum = node2Delete.right.searchMinimum()
                    if minimum == node2Delete.right:
                        if theFather.left == node2Delete:
                            theFather.left = minimum
                        else:
                            theFather.right = minimum
                        minimum.father = theFather
                        minimum.addChild(node2Delete.left)
                    else:
                        node2Delete.value = minimum.value
                        node2Delete.right.deleteByValue(minimum.value)
        
    def __str__(self):
        s =  f"This: {self.value} " 
        s += f"Father: {'-' if self.father is None else self.father.value} "
        s += f"Left: {'-' if self.left is None else self.left.value} "
        s += f"Right: {'-' if self.right is None else self.right.value}"
        return s
    
    def printTree(self, level=0):
        if self.right:
            self.right.printTree(level + 1)
        print("   " * level + str(self.value))
        if self.left:
            self.left.printTree(level + 1)

# Nodos en preorder izquierda
nodosI = [2 ,1, 3, 5]
# Nodos en preorder derecha
nodosD = [7, 9, 8]
# Nodo raiz
raiz = Tree(6)
for nodo in nodosD: raiz.addChild(nodo)
# Crea una rama para probar addChild(Tree)
rama = Tree(4)
for nodo in nodosI: rama.addChild(nodo)
raiz.addChild(rama)

raiz.printTree()

print("\nPre-order:")
raiz.preOrder()
print("\nIn-order:")
raiz.inOrder()
print("\nPost-order:")
raiz.postOrder()

print("\n\nMinimo:\n", raiz.searchMinimum())
print("\nBuscar nodo 9:\n", raiz.searchValue(9))

print("\nEliminar nodo sin hijos:")
raiz.printTree()
raiz.deleteByValue(1)
raiz.printTree()

print("\nEliminar nodo con hijo izquierdo:")
raiz.printTree()
raiz.deleteByValue(9)
raiz.printTree()

print("\nEliminar nodo con hijo derecho:")
raiz.printTree()
raiz.deleteByValue(7)
raiz.printTree()

print("\nEliminar nodo con ambos hijos:")
raiz.printTree()
raiz.deleteByValue(4)
raiz.printTree()

print("\nEliminar nodo que no existe:")
raiz.deleteByValue(-1)

# Reconstruir árbol
print("\nReconstruir árbol:")
nodosPreorder= [4, 2, 1, 3, 5, 7, 9 , 8]
raiz= Tree(6)
for nodo in nodosPreorder: raiz.addChild(nodo)
raiz.printTree()

# Profundidad de un nodo
print(f"\nProfundidad nodo 9: {raiz.levelValue(9)}")
print(f"Profundidad nodo 1: {raiz.levelValue(1)}")
print(f"Profundidad nodo 6: {raiz.levelValue(6)}")

# Profundidad del árbol
print(f"\nProfundidad del árbol: ", raiz.depth())

# Determinar si un nodo es hoja
print(f"\nNodo 9 {'' if raiz.isLeaf(9) else 'no '}es hoja")
print(f"Nodo 1 {'' if raiz.isLeaf(1) else 'no '}es hoja")
print(f"Nodo 8 {'' if raiz.isLeaf(8) else 'no '}es hoja")

# Imprimir nodos hoja
print(f"\nNodos hoja:")
raiz.printLeaves()

# Valor máximo
print(f"\n\nNodo con valor máximo:\n{raiz.searchMax()}")